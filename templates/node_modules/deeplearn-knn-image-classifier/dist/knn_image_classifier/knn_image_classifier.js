"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var dl = require("deeplearn");
var deeplearn_squeezenet_1 = require("deeplearn-squeezenet");
var model_util = require("../util");
var KNNImageClassifier = (function () {
    function KNNImageClassifier(numClasses, k) {
        this.numClasses = numClasses;
        this.k = k;
        this.classLogitsMatrices = [];
        this.classExampleCount = [];
        this.varsLoaded = false;
        this.squashLogitsDenominator = dl.scalar(300);
        for (var i = 0; i < this.numClasses; i++) {
            this.classLogitsMatrices.push(null);
            this.classExampleCount.push(0);
        }
        this.squeezeNet = new deeplearn_squeezenet_1.SqueezeNet();
    }
    KNNImageClassifier.prototype.load = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.squeezeNet.load()];
                    case 1:
                        _a.sent();
                        this.varsLoaded = true;
                        return [2];
                }
            });
        });
    };
    KNNImageClassifier.prototype.clearClass = function (classIndex) {
        if (classIndex >= this.numClasses) {
            console.log('Cannot clear invalid class ${classIndex}');
            return;
        }
        this.classLogitsMatrices[classIndex] = null;
        this.classExampleCount[classIndex] = 0;
        this.clearTrainLogitsMatrix();
    };
    KNNImageClassifier.prototype.addImage = function (image, classIndex) {
        var _this = this;
        if (!this.varsLoaded) {
            console.warn('Cannot add images until vars have been loaded.');
            return;
        }
        if (classIndex >= this.numClasses) {
            console.warn('Cannot add to invalid class ${classIndex}');
        }
        this.clearTrainLogitsMatrix();
        dl.tidy(function () {
            var logits = _this.squeezeNet.predict(image);
            var imageLogits = _this.normalizeVector(logits);
            var logitsSize = imageLogits.shape[0];
            if (_this.classLogitsMatrices[classIndex] == null) {
                _this.classLogitsMatrices[classIndex] = imageLogits.as2D(1, logitsSize);
            }
            else {
                var newTrainLogitsMatrix = _this.classLogitsMatrices[classIndex]
                    .as2D(_this.classExampleCount[classIndex], logitsSize)
                    .concat(imageLogits.as2D(1, logitsSize), 0);
                _this.classLogitsMatrices[classIndex].dispose();
                _this.classLogitsMatrices[classIndex] = newTrainLogitsMatrix;
            }
            dl.keep(_this.classLogitsMatrices[classIndex]);
            _this.classExampleCount[classIndex]++;
        });
    };
    KNNImageClassifier.prototype.predict = function (image) {
        var _this = this;
        if (!this.varsLoaded) {
            throw new Error('Cannot predict until vars have been loaded.');
        }
        return dl.tidy(function () {
            var logits = _this.squeezeNet.predict(image);
            var imageLogits = _this.normalizeVector(logits);
            var logitsSize = imageLogits.shape[0];
            if (_this.trainLogitsMatrix == null) {
                var newTrainLogitsMatrix = null;
                for (var i = 0; i < _this.numClasses; i++) {
                    newTrainLogitsMatrix = _this.concatWithNulls(newTrainLogitsMatrix, _this.classLogitsMatrices[i]);
                }
                _this.trainLogitsMatrix = newTrainLogitsMatrix;
            }
            if (_this.trainLogitsMatrix == null) {
                console.warn('Cannot predict without providing training images.');
                return null;
            }
            dl.keep(_this.trainLogitsMatrix);
            var numExamples = _this.getNumExamples();
            return _this.trainLogitsMatrix.as2D(numExamples, logitsSize)
                .matMul(imageLogits.as2D(logitsSize, 1))
                .as1D();
        });
    };
    KNNImageClassifier.prototype.predictClass = function (image) {
        return __awaiter(this, void 0, void 0, function () {
            var imageClass, confidences, knn, numExamples, kVal, topK, _a, _b, topKIndices, indicesForClasses, topKCountsForClasses, i, num, i, classForEntry, topConfidence, i, probability;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        imageClass = -1;
                        confidences = new Array(this.numClasses);
                        if (!this.varsLoaded) {
                            throw new Error('Cannot predict until vars have been loaded.');
                        }
                        knn = this.predict(image).asType('float32');
                        numExamples = this.getNumExamples();
                        kVal = Math.min(this.k, numExamples);
                        _b = (_a = model_util).topK;
                        return [4, knn.data()];
                    case 1:
                        topK = _b.apply(_a, [_c.sent(), kVal]);
                        knn.dispose();
                        topKIndices = topK.indices;
                        if (topKIndices == null) {
                            return [2, { classIndex: imageClass, confidences: confidences }];
                        }
                        indicesForClasses = [];
                        topKCountsForClasses = [];
                        for (i = 0; i < this.numClasses; i++) {
                            topKCountsForClasses.push(0);
                            num = this.classExampleCount[i];
                            if (i > 0) {
                                num += indicesForClasses[i - 1];
                            }
                            indicesForClasses.push(num);
                        }
                        for (i = 0; i < topKIndices.length; i++) {
                            for (classForEntry = 0; classForEntry < indicesForClasses.length; classForEntry++) {
                                if (topKIndices[i] < indicesForClasses[classForEntry]) {
                                    topKCountsForClasses[classForEntry]++;
                                    break;
                                }
                            }
                        }
                        topConfidence = 0;
                        for (i = 0; i < this.numClasses; i++) {
                            probability = topKCountsForClasses[i] / kVal;
                            if (probability > topConfidence) {
                                topConfidence = probability;
                                imageClass = i;
                            }
                            confidences[i] = probability;
                        }
                        return [2, { classIndex: imageClass, confidences: confidences }];
                }
            });
        });
    };
    KNNImageClassifier.prototype.getClassExampleCount = function () {
        return this.classExampleCount;
    };
    KNNImageClassifier.prototype.clearTrainLogitsMatrix = function () {
        if (this.trainLogitsMatrix != null) {
            this.trainLogitsMatrix.dispose();
            this.trainLogitsMatrix = null;
        }
    };
    KNNImageClassifier.prototype.concatWithNulls = function (ndarray1, ndarray2) {
        if (ndarray1 == null && ndarray2 == null) {
            return null;
        }
        if (ndarray1 == null) {
            return ndarray2.clone();
        }
        else if (ndarray2 === null) {
            return ndarray1.clone();
        }
        return ndarray1.concat(ndarray2, 0);
    };
    KNNImageClassifier.prototype.normalizeVector = function (vec) {
        var squashedVec = dl.div(vec, this.squashLogitsDenominator);
        var sqrtSum = squashedVec.square().sum().sqrt();
        return dl.div(squashedVec, sqrtSum);
    };
    KNNImageClassifier.prototype.getNumExamples = function () {
        var total = 0;
        for (var i = 0; i < this.classExampleCount.length; i++) {
            total += this.classExampleCount[i];
        }
        return total;
    };
    KNNImageClassifier.prototype.dispose = function () {
        this.squeezeNet.dispose();
        this.clearTrainLogitsMatrix();
        this.classLogitsMatrices.forEach(function (classLogitsMatrix) { return classLogitsMatrix.dispose(); });
        this.squashLogitsDenominator.dispose();
    };
    return KNNImageClassifier;
}());
exports.KNNImageClassifier = KNNImageClassifier;
